unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics, Vcl.Controls, Vcl.Forms, Vcl.Dialogs,
  OverbyteIcsTypes, OverbyteIcsWndControl, jpeg, OverbyteIcsWSocket,
  Vcl.StdCtrls, System.NetEncoding,zlib;
// For Base64 encoding and working with JPEG

type
  TForm1 = class(TForm)
    WSocket1: TWSocket;
    Memo1: TMemo;
    Edit1: TEdit;
    Button1: TButton;
    procedure FormCreate(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure WSocket1SessionConnected(Sender: TObject; ErrCode: Word);
    procedure WSocket1DataAvailable(Sender: TObject; ErrCode: Word);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

procedure TForm1.Button1Click(Sender: TObject);
begin
  self.WSocket1.SendStr('MSG|' + self.Edit1.Text + #13#10);
  self.Memo1.Lines.Add('You Said: ' + Edit1.Text);
  self.Edit1.Clear;
  self.Edit1.SetFocus;
end;

procedure TForm1.FormCreate(Sender: TObject);
begin
  WSocket1.Proto := 'tcp';
  WSocket1.Port := '3434';
  WSocket1.Addr := 'localhost';
  WSocket1.LineMode := TRUE;
  WSocket1.LineEnd := #13#10;
  WSocket1.Connect;
end;

procedure TForm1.WSocket1SessionConnected(Sender: TObject; ErrCode: Word);
var
  RandomNickName: string;
begin
  // Generate a random nickname
  Randomize;
  RandomNickName := 'User' + IntToStr(Random(1000)); // Example: User123

  // Send the "NewCon" message with the random nickname
  self.WSocket1.SendStr('NewCon|' + RandomNickName + #13#10);
end;

procedure TForm1.WSocket1DataAvailable(Sender: TObject; ErrCode: Word);
var
  ReceivedData: string;
  sl: TStringList;
  ScreenBitmap: TBitmap;
  MemoryStream: TMemoryStream;
  CompressedStream: TMemoryStream;
  ScreenshotBytes: TBytes;
  JPEGImage: TJPEGImage;
begin
  ReceivedData := WSocket1.ReceiveStr;

  sl := TStringList.Create;
  try
    sl.Delimiter := '|';
    sl.StrictDelimiter := True;
    sl.DelimitedText := ReceivedData;

    if sl[0] = 'SENDSCREENSHOT' then
    begin
      // Capture Screenshot
      ScreenBitmap := TBitmap.Create;
      try
        ScreenBitmap.Width := Screen.Width;
        ScreenBitmap.Height := Screen.Height;
        BitBlt(ScreenBitmap.Canvas.Handle, 0, 0, Screen.Width, Screen.Height,
          GetDC(0), 0, 0, SRCCOPY);

        // Convert to JPEG
        JPEGImage := TJPEGImage.Create;
        try
          JPEGImage.Assign(ScreenBitmap);
          MemoryStream := TMemoryStream.Create;
          try
            JPEGImage.CompressionQuality := 75; // Adjust quality if needed
            JPEGImage.SaveToStream(MemoryStream);

            // Compress with ZLib
            MemoryStream.Position := 0;
            CompressedStream := TMemoryStream.Create;
            try
              ZCompressStream(MemoryStream, CompressedStream);
              CompressedStream.Position := 0;

              // Convert to TBytes
              SetLength(ScreenshotBytes, CompressedStream.Size);
              CompressedStream.ReadBuffer(ScreenshotBytes[0], CompressedStream.Size);

              // Send the compressed image
             WSocket1.SendLine('IMAGE|' + TNetEncoding.Base64.EncodeBytesToString(ScreenshotBytes) + #13#10);
            finally
              CompressedStream.Free;
            end;
          finally
            MemoryStream.Free;
          end;
        finally
          JPEGImage.Free;
        end;
      finally
        ScreenBitmap.Free;
      end;

      Exit;
    end;

    if sl[0] = 'MSG' then
    begin
      Memo1.Lines.Add('Server Says: ' + sl[1]);
      Exit;
    end;
  finally
    sl.Free;
  end;
end;

end.
